---
import type { BlogSchema } from '../content/config'
import BaseLayout from './BaseLayout.astro'

interface Props {
  title: string
  description: string
  publishDate: Date
  image?: string
  tags?: string[]
}

const { title, description, publishDate, image, tags } = Astro.props
const wordsPerMinute = 200 // Average reading speed
const content = await Astro.slots.render('default')
const textContent = content.toString()
const wordCount = textContent.split(/\s+/).length
const readingTime = Math.ceil(wordCount / wordsPerMinute)
---

<BaseLayout title={title} description={description} includeSidebar={false}>
 <!-- Back button at the top -->
  <div class="flex justify-between items-center ml-8 ">
    <a
      href="/blog"
      class="inline-flex items-center text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-5 w-5 mr-2"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fill-rule="evenodd"
          d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
          clip-rule="evenodd"
        />
      </svg>
      Volver al blog
    </a>
  </div>


  <article class="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <header class="mb-12">
      {image && (
        <div class="mb-8 rounded-xl overflow-hidden shadow-lg">
          <img
            src={image}
            alt={title}
            class="w-full h-auto object-cover"
            loading="lazy"
          />
        </div>
      )}
      
      <div class="flex flex-col gap-2 mb-6">
        <h1 class="text-4xl md:text-5xl font-bold tracking-tight text-gray-900 dark:text-white">
          {title}
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300">
          {description}
        </p>
      </div>

      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
        <time datetime={publishDate.toISOString()}>
          {new Date(publishDate).toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}
        </time>
        <span>•</span>
        <span>{readingTime} min de lectura</span>
        
        {tags?.length && (
          <>
            <span>•</span>
            <div class="flex flex-wrap gap-2">
              {tags.map((tag) => (
                <span class="px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 text-xs">
                  {tag}
                </span>
              ))}
            </div>
          </>
        )}
      </div>
    </header>

    <div class="prose prose-lg dark:prose-invert max-w-none">
      <slot />
    </div>

    <footer class="mt-16 pt-8 border-t border-gray-200 dark:border-gray-700">
      <div class="flex justify-between items-center">
        <a
          href="/blog"
          class="inline-flex items-center text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 mr-2"
            viewBox="0 0 20 20"
            fill="currentColor"
          >
            <path
              fill-rule="evenodd"
              d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
              clip-rule="evenodd"
            />
          </svg>
          Volver al blog
        </a>
      </div>
    </footer>
  </article>
</BaseLayout>
